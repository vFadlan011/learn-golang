.
├── 01-hello
│   ├── 01-hello.go
│   ├── go.mod
│   └── hello-world
├── 02-data-types
│   ├── A-basic-data-types
│   │   ├── 02-basic-data-types.go
│   │   ├── basic-data-types
│   │   └── go.mod
│   ├── B-data-types-convertion
│   │   ├── 02-data-types-convertion.go
│   │   ├── data-types-convertion
│   │   └── go.mod
│   ├── C-data-type-aliases
│   │   ├── 02-data-type-aliases.go
│   │   ├── C-data-type-aliases
│   │   └── go.mod
│   ├── D-array-data-type
│   │   ├── 02-array-data-type.go
│   │   ├── array-data-type
│   │   └── go.mod
│   ├── E-slice-data-type
│   │   ├── 02-slice-data-type.go
│   │   ├── go.mod
│   │   └── slice-data-type
│   └── F-map-data-type
│       ├── 02-map-data-type.go
│       ├── go.mod
│       └── map-data-type
├── 03-variables
│   ├── 03-variables.go
│   ├── go.mod
│   └── variables
├── 04-constant-variables
│   ├── 04-constant-variables.go
│   ├── constant-variables
│   └── go.mod
├── 05-operators
│   ├── A-arithmetic-operators
│   │   ├── 05-A-arithmetic-operators.go
│   │   ├── arithmetic-operators
│   │   └── go.mod
│   ├── B-comparison-operators
│   │   ├── 05-B-comparison-operators.go
│   │   ├── comparison-operators
│   │   └── go.mod
│   └── C-logic-operators
│       ├── 05-C-logic-operators.go
│       ├── go.mod
│       └── logic-operators
├── 06-conditionals
│   ├── A-if-else
│   │   ├── 06-if-else.go
│   │   ├── go.mod
│   │   └── if-else
│   └── B-switch-case
│       ├── 06-switch-case.go
│       ├── go.mod
│       └── switch-case
├── 07-for-loop
│   ├── A-basic-loop
│   │   ├── 07-basic-loop.go
│   │   ├── basic-loop
│   │   └── go.mod
│   ├── B-for-with-statement
│   │   ├── 07-for-with-statement.go
│   │   ├── for-with-statement
│   │   └── go.mod
│   ├── C-for-without-statement
│   │   ├── 07-for-without-statement.go
│   │   ├── for-without-statement
│   │   └── go.mod
│   ├── D-for-range
│   │   ├── 07-for-range.go
│   │   ├── for-range
│   │   └── go.mod
│   ├── E-break-continue
│   │   ├── 07-break-continue.go
│   │   ├── break-continue
│   │   └── go.mod
│   └── F-nested-loop
│       ├── 07-nested-loop.go
│       ├── go.mod
│       └── nested-loop
├── 08-function
│   ├── A-basic-function
│   │   ├── 08-basic-function.go
│   │   ├── basic-function
│   │   └── go.mod
│   ├── B-function-parameter
│   │   ├── 08-function-parameter.go
│   │   ├── function-parameter
│   │   └── go.mod
│   ├── C-returning-value
│   │   ├── 08-returning-value.go
│   │   ├── go.mod
│   │   └── returning-value
│   ├── D-returning-multiple-values
│   │   ├── 08-returning-multiple-value.go
│   │   ├── go.mod
│   │   └── returning-multiple-values
│   ├── E-named-return-values
│   │   ├── 08-named-return-values.go
│   │   ├── go.mod
│   │   └── named-return-values
│   ├── F-variadic-function
│   │   ├── 08-variadic-function.go
│   │   ├── go.mod
│   │   └── variadic-function
│   ├── G-function-value
│   │   ├── 08-function-value.go
│   │   ├── function-value
│   │   └── go.mod
│   ├── H-function-as-parameter
│   │   ├── 08-function-as-parameter.go
│   │   ├── function-as-parameter
│   │   └── go.mod
│   ├── I-anonymous-function
│   │   ├── 08-anonymous-function.go
│   │   ├── anonymous-function
│   │   └── go.mod
│   ├── J-recursive-function
│   │   ├── 08-recursive-function.go
│   │   ├── go.mod
│   │   └── recursive-function
│   ├── K-closure
│   │   ├── 08-closure.go
│   │   ├── closure
│   │   └── go.mod
│   └── L-function-as-return-value
│       ├── 08-function-as-return-value.go
│       ├── function-as-return-value
│       └── go.mod
├── go.work
└── tree.txt